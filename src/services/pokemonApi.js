import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

export const pokemonApi = createApi({
  reducerPath: "pokemonApi",
  baseQuery: fetchBaseQuery({ baseUrl: "https://pokeapi.co/api/v2/" }),
  tagTypes: ["Pokemon"], // üîß –î–æ–¥–∞—î–º–æ —Ç–∏–ø —Ç–µ–≥—ñ–≤
  endpoints: (build) => ({
    // üîÅ 1. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∫–µ–º–æ–Ω–∞ –∑–∞ —ñ–º–µ–Ω–µ–º
    getPokemonByName: build.query({
      query: (name) => `pokemon/${name}`,

      // –î–æ–¥–∞—î–º–æ —Ç–µ–≥ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ
      providesTags: (result, error, name) =>
        result ? [{ type: "Pokemon", id: name }] : [],
    }),
    getPokemonInfoByType: build.query({
      query: (type) => `type/${type}`,
    }),

    // üîÅ 2. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–∫–µ–º–æ–Ω—ñ–≤ –∑ –ø–æ–≤–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
    getPokemonsPaginated: build.query({
      query: ({ limit = 20, offset = 0 }) =>
        `pokemon/?limit=${limit}&offset=${offset}`,

      // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–∂–Ω–æ–≥–æ –ø–æ–∫–µ–º–æ–Ω–∞
      async transformResponse(response) {
        const fullData = await Promise.all(
          response.results.map((p) => fetch(p.url).then((res) => res.json()))
        );

        return {
          ...response,
          fullData,
        };
      },

      // –ü—Ä–∏—Å–≤–æ—é—î–º–æ —Ç–µ–≥–∏ –∫–æ–∂–Ω–æ–º—É –ø–æ–∫–µ–º–æ–Ω—É –¥–ª—è –∫–µ—à—É
      providesTags: (result) => {
        return result
          ? result.fullData.map((p) => ({ type: "Pokemon", id: p.name }))
          : [];
      },
    }),
  }),
});

// üîÅ –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ö—É–∫–∏
export const {
  useGetPokemonByNameQuery,
  useGetPokemonsPaginatedQuery,
  useGetPokemonInfoByTypeQuery,
} = pokemonApi;
