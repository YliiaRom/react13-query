function Tasks() {
  return (
    <div className="tasksBox">
      <h2>
        {" "}
        Tasks + RTK Query()
        <br />
        –ü–µ—Ä–µ–≥–æ—Ä–Ω–∏ –∫–∞—Ä—Ç–∫—É, –∑—Ä—ñ–≤–Ω—è–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å
      </h2>

      <div className="questionsCard">
        <div className="questFront">
          <p> createApi():</p>

          <p>export const api = createApi(&#123;</p>
        </div>
        <div className="questBack">
          <p>
            –Ø–¥—Ä–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ, —â–æ –¥–æ–∑–≤–æ–ª—è—î{" "}
            <span className="accent">–≤–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–∞–±—ñ—Ä "–µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤"</span> –¥–ª—è
            <span className="accent"> –æ—Ç—Ä–∏–º–∞–Ω–Ω—è</span> —Ç–∞{" "}
            <span className="accent">—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö</span>.
          </p>
        </div>
      </div>
      <div className="questionsCard">
        <div className="questFront">
          <p>fetchBaseQuery():</p>
          <p>baseQuery: fetchBaseQuery(&#123; baseUrl: '/api'&#125;),</p>
        </div>
        <div className="questBack">
          <p>
            –æ–±–≥–æ—Ä—Ç–∫–∞ –Ω–∞–≤–∫–æ–ª–æ fetch, –¥–ª—è —Å–ø—Ä–æ—â–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ <br />(
            <span className="accent">baseUrl</span> (–±–∞–∑–æ–≤–∞ –∞–¥—Ä–µ—Å–∞ API),
            <br />
            <span className="accent"> prepareHeaders</span> (–¥–æ–¥–∞–≤–∞–Ω–Ω—è/–∑–º—ñ–Ω–∞
            –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º),
            <br />
            <span className="accent"> credentials </span>(–∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫—É–∫–∞–º–∏),{" "}
            <br />
            <span className="accent"> fetchFn </span>(–≤–ª–∞—Å–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è fetch),
            <span className="accent"> paramsSerializer</span> (–∫–∞—Å—Ç–æ–º–Ω–∞ –æ–±—Ä–æ–±–∫–∞
            query- –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤),
            <br />
            <span className="accent"> headers</span> (–≥–ª–æ–±–∞–ª—å–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è
            –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤)).
          </p>
        </div>
      </div>
      <div className="questionsCard">
        <div className="questFront">reducerPath: 'api' ?</div>
        <div className="questBack">–£–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º`—è –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –≤ store</div>
      </div>

      <div className="questionsCard">
        <div className="questFront">–î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ store</div>
        <div className="questBack">
          <p>
            export const store = <span className="accent">configureStore</span>
            (&#123;
            <br />
            reducer: &#123; // –î–æ–¥–∞—î–º–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π —Ä–µ–¥—É–∫—Ç–æ—Ä
            <br />
            <span className="accent">[api.reducerPath]: api.reducer,</span>{" "}
            &#125;,
            <br />
            middleware: (getDefaultMiddleware) =&gt;
            <br />
            getDefaultMiddleware().concat(
            <span className="accent">api.middleware</span>)
            <br />
            &#125;)
          </p>
        </div>
      </div>
      <div className="questionsCard">
        <div className="questFront">
          –©–æ —Ä–æ–±–∏—Ç—å unwrap() ?
          <br /> await addPost(&#123;
          <br />
          id: new Date().getTime(),
          <br />
          title: e.target.elements.title.value,
          <br />
          body: e.target.elements.body.value,
          <br />
          &#125;).unwrap();
        </div>
        <div className="questBack">
          .unwrap() —É RTK Query (Redux Toolkit Query) –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Ç–æ–≥–æ,
          —â–æ–± ¬´—Ä–æ–∑–ø–∞–∫—É–≤–∞—Ç–∏¬ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º—É—Ç–∞—Ü—ñ—ó –∞–±–æ –∑–∞–ø–∏—Ç—É —ñ: ‚úÖ –æ—Ç—Ä–∏–º–∞—Ç–∏ data
          –Ω–∞–ø—Ä—è–º—É, —è–∫—â–æ –∑–∞–ø–∏—Ç –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ;
          <br />‚ùå –≤–∏–∫–∏–Ω—É—Ç–∏ –ø–æ–º–∏–ª–∫—É (throw), —è–∫—â–æ –∑–∞–ø–∏—Ç –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é ‚Äî
          —â–æ–± —ó—ó –º–æ–∂–Ω–∞ –±—É–ª–æ –æ–±—Ä–æ–±–∏—Ç–∏ –≤ try...catch.
          <br />
          üîÅ –ë–µ–∑ .unwrap() –¥–æ–≤–µ–ª–æ—Å—å –±–∏ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ isSuccess / isError –≤—Ä—É—á–Ω—É.
        </div>
      </div>
      <div className="questionsCard">
        <div className="questFront">
          {" "}
          –©–æ —Ä–æ–±–∏—Ç—å
          <br />
          tagTypes: ["Posts"]
          <br /> ?
        </div>
        <div className="questBack">
          –í–∫–∞–∑—É—î —Ç–∏–ø–∏ —Ç–µ–≥—ñ–≤, —è–∫—ñ –±—É–¥—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è —Ç–∞
          —ñ–Ω–≤–∞–ª—ñ–¥–∞—Ü—ñ—ó <br />
          <span className="accent"> tagTypes: [</span>'Post'],
          <br /> endpoints: (build) =&gt; (&#123;
          <br />
          // 1. –ü—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–∏—Ç—É (Query): –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –∑–∞ ID
          <br />
          getPost:<span className="accent"> build.query(&#123;</span>
          <br />
          query: (id) =&gt; `posts/$&#123;id&#125;`,
          <br />
          // –ù–∞–¥–∞—î —Ç–µ–≥ 'Post' –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º ID –¥–ª—è –∫–µ—à–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö.
          <br />
          <span className="accent">providesTags: (result, error, id)</span>
          =&gt; [&#123; type: 'Post', id &#125;],
          <br />
          &#125;)
          <br />
        </div>
      </div>
      <div className="questionsCard">
        <div className="questFront">
          transformResponse: (response, meta, arg) ?
        </div>
        <div className="questBack">–û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø–µ—Ä–µ–¥ –∫–µ—à—É–≤–∞–Ω–Ω—è–º</div>
      </div>
      <div className="questionsCard">
        <div className="questFront">keepUnusedDataFor: 60</div>
        <div className="questBack">
          <span className="accent">keepUnusedDataFor: 60</span>
          –ß–∞—Å
          <span className="accent">–∂–∏—Ç—Ç—è –∫–µ—à—É</span> –ø—ñ—Å–ª—è –æ—Å—Ç–∞–Ω–Ω–æ—å–æ–≥–æ
          –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è (60 - —Å–µ–∫—É–Ω–¥–∏).
          <br /> [–ó—Ä–æ–±–∏–ª–∏ –∑–∞–ø–∏—Ç --&gt; —á–µ—Ä–µ–∑ 60sec –¥–∞–Ω–Ω—ñ –≤–∏–¥–∞–ª—è—Ç—å—Å—è = –Ω–µ
          –±–µ—Ä—É—Ç—å—Å—è –∑ –∫–µ—à–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ]
        </div>
      </div>

      <div>
        <h2>pagination</h2>
      </div>
      <div>
        {" "}
        <button
          className="pgMainBtn"
          style={{
            boxShadow: "0px 5px 13px #555",
          }}
        >
          <a
            href="https://redux-toolkit.js.org/rtk-query/usage/infinite-queries"
            target="_blank"
          >
            Doc infinity pagination
          </a>
        </button>{" "}
      </div>

      <div className="questionsCard">
        <div className="questFront">
          <div>
            <button
              className="pgMainBtn"
              style={{
                boxShadow: "0px 5px 13px #555",
              }}
            >
              <a
                href="https://redux-toolkit.js.org/rtk-query/usage/infinite-queries"
                target="_blank"
              >
                Doc infinity pagination
              </a>
            </button>{" "}
            <br />
            <br />
            build.infiniteQuery(&#123; ?
          </div>
        </div>
        <div className="questBack" style={{ fontSize: "14px" }}>
          <span>
            getPosts: build.<span className="accent">infiniteQuery</span>(&#123;
          </span>
          <br />
          <span>
            <span className="accent">query: (&#123; pageParam = 1 &#125;)</span>{" "}
            =&gt;
            <br /> 'posts?_page=$&#123;pageParam &#125;&_limit=10',
          </span>
          <br />
          <span className="accent">infiniteQueryOptions: &#123;</span>
          <br />
          <span>
            <span className="accent">initialPageParam: 1, </span>// –ü–æ—á–∞—Ç–∫–æ–≤–µ
            –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏.
          </span>
          <br />
          <span className="accent">
            getNextPageParam: (lastPage, allPages, lastPageParam) =&gt; &#123;
          </span>
          <br />
          // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏. //
          –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ API –ø–æ–≤–µ—Ä—Ç–∞—î —â–æ—Å—å, —â–æ –¥–æ–∑–≤–æ–ª—è—î –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—É
          <br />
          —Å—Ç–æ—Ä—ñ–Ω–∫—É.{" "}
        </div>
      </div>
      <div className="questionsCard">
        <div className="questFront">
          <p style={{ color: "#000000" }}>build.infiniteQuery(&#123;</p>
          <p style={{ color: "#000000" }}>
            query: (&#123;pageParam = 1&#125;) =&gt;'...'
          </p>{" "}
          <br />
          infiniteQueryOptions: &#123;
          <br />
          <br />
          initialPageParam: x,
          <br /> maxPages: 3,
          <br /> getNextPageParam:(a, b, c,...) =&gt;
        </div>
        <div className="questBack">
          <h3>DOC</h3>
          <p>
            <span className="accent">initialPageParam</span>: 1, // –ü–æ—á–∞—Ç–∫–æ–≤–µ
            –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏.
          </p>
          <p>
            <span className="accent">maxPages: 3</span> //–ó–∞ –±–∞–∂–∞–Ω–Ω—è–º –æ–±–º–µ–∂—Ç–µ
            –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–µ—à–æ–≤–∞–Ω–∏—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫
          </p>
          <span className="accent">getNextPageParam</span>: (lastPage, allPages,
          lastPageParam) =&gt; &#123;-–æ–±—á—ñ—Å–ª–µ–Ω–Ω—è –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω —Å—Ç–æ—Ä
          <br />
          <p>
            {/* // –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ API –ø–æ–≤–µ—Ä—Ç–∞—î —â–æ—Å—å, —â–æ –¥–æ–∑–≤–æ–ª—è—î –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—É
            —Å—Ç–æ—Ä—ñ–Ω–∫—É.
            <br />
            // –¢—É—Ç –ø—Ä–æ—Å—Ç–æ –∑–±—ñ–ª—å—à—É—î–º–æ –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏. */}
            // –ù–µ–º–∞—î –±—ñ–ª—å—à–µ –¥–∞–Ω–∏—Ö
            <br /> if (lastPage && lastPage.length === 0) &#123;
            <br />
            return undefined&#125; <br /> return{" "}
            <span className="accent">lastPageParam + 1&#125;</span>,
          </p>
        </div>
      </div>
      <div className="questionsCard">
        <div className="questFront">
          –§-—Ü—ñ—è –¥–ª—è –ö–Ω–æ–ø–∫–∏ (Component)
          <br />
          <button style={{ boxShadow: "0px 5px 20px #000" }}>
            {" "}
            ‚Üí –Ω–∞—Å—Ç—É–ø–Ω–∞ –°—Ç–æ—Ä—ñ–Ω–∫–∞
          </button>
          const &#123;data, fetchNextPage, hasNextPage, isFetching, isLoading,
          isError&#125; = useGetPostsInfiniteQuery()
        </div>
        <div className="questBack">
          {" "}
          const handlerNextPage = async () =&gt; &#123;
          <br />
          <span>
            if (currentPageIndex + 1 === totalPages &&
            <span className="accent">hasNextPage</span>) &#123;
          </span>
          <br />
          <span className="accent">await fetchNextPage()</span>
          <br />
          <span className="accent">setCurrentPageIndex</span>((prev) =&gt; prev
          + 1);
          <br />
          &#125;;
        </div>
      </div>
      <div className="questionsCard">
        <div className="questFront">
          {" "}
          –§-—Ü—ñ—è –¥–ª—è –ö–Ω–æ–ø–∫–∏ (RTK Query)
          <br />
          <button style={{ boxShadow: "0px 5px 20px #000" }}>
            {" "}
            ‚Üí –Ω–∞—Å—Ç—É–ø–Ω–∞ –°—Ç–æ—Ä—ñ–Ω–∫–∞
          </button>
        </div>
        <div className="questBack" style={{ fontSize: "14px" }}>
          getNextPageParam: (lastPage, allPages, lastPageParam) =&gt; &#123;
          <br />
          if (lastPage && lastPage.length === 0) &#123;
          <br />
          return undefined; // –±–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ—Ç
          <br />
          &#125;
          <br /> return lastPageParam + 1; // —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ &#125;{" "}
          <span>
            &#125; –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ
            <span className="accent"> –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã </span>
            (lastPage) <br />–∏
            <span className="accent"> —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã </span>
            (lastPageParam).
            <br />
            –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç undefined, –∑–Ω–∞—á–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ –Ω–µ—Ç.
            <br />
            –ò–Ω–∞—á–µ<span className="accent"> –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä</span>
            (–Ω–∞–ø—Ä–∏–º–µ—Ä, lastPageParam + 1). &#125;{" "}
          </span>
        </div>
        <br />
      </div>
      <div className="questionsCard">
        <div className="questFront">
          fetchNextPage() ?<br />
          <br />
          const handlerNextPage = async () =&gt; &#123;
          <span>
            if (currentPageIndex + 1 === totalPages &&
            <span>hasNextPage</span>) &#123;
          </span>
          <span style={{ color: "#000" }}>await fetchNextPage()</span>
          <span>setCurrentPageIndex</span>((prev) =&gt; prev + 1);
          <br />
          &#125;;
        </div>
        <div className="questBack">
          await <span className="accent">fetchNextPage()</span>; <br />
          // –≤—ã–∑–≤–∞–ª–∏ –∑–∞–ø—Ä–æ—Å //
          <br />
          <span className="accent">RTK Query –≤—ã–∑—ã–≤–∞–µ—Ç getNextPageParam,</span>
          –ø–æ–ª—É—á–∞–µ—Ç nextPageParam = 2 <br />
          // –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å pageParam=2 /<br />
          // –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ data.pages <br />
          getNextPageParam ‚Äî –ª–æ–≥–∏–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è, –∫–∞–∫—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–≥—Ä—É–∂–∞—Ç—å
          —Å–ª–µ–¥—É—é—â–µ–π.
          <br /> fetchNextPage() ‚Äî <span className="accent">—Ç—Ä–∏–≥–≥–µ—Ä,</span>{" "}
          –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
        </div>
      </div>
      <div className="questionsCard">
        <div className="questFront">
          –ö–ª—é—á–∏–≤—ñ –º–æ–º–µ–Ω—Ç–∏ –ø—Ä–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ñ —ñ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –∫–µ—à—É
        </div>
        <div className="questBack">
          <span>
            –ù–æ–≤—ñ –¥–∞–Ω—ñ –∑–∞–ø–∏—Ç—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —Ç–æ–¥—ñ, –∫–æ–ª–∏ —Ç–∏
            <span className="accent"> –Ω–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ</span>
          </span>
          .
          <br />{" "}
          <span>
            <br /> –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –º—ñ–∂ —É–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–º–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∞–º–∏ ‚Äî —Ü–µ –ø—Ä–æ—Å—Ç–æ{" "}
            <span className="accent">–∑–º—ñ–Ω–∞ —ñ–Ω–¥–µ–∫—Å—É.</span>
            <br />{" "}
          </span>
          <br />{" "}
          <span>
            <span className="accent">data.pages ‚Äî —Ü–µ ¬´—ñ—Å—Ç–æ—Ä—ñ—è¬ª </span>–≤—Å—ñ—Ö
            —Å—Ç–æ—Ä—ñ–Ω–æ–∫, —è–∫—ñ –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏.
          </span>
        </div>
      </div>
      <div className="questionsCard">
        <div className="questFront">–∑–º—ñ—â–µ–Ω–Ω—è (offset)</div>
        <div className="questBack">
          –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ç–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ <br />{" "}
          const offset = currentPage * xxxPerPage;
        </div>
      </div>
      <div className="questionsCard">
        <div className="questFront">select()</div>
        <div className="questBack">
          <p>–ü–æ–≤–µ—Ä—Ç–∞—î –¥–∞–Ω–Ω—ñ –∑ –∫–µ—à–∞</p>
          <p>
            <span>
              {" "}
              const x =<span className="accent"> useSelector</span>((state)
              =&gt;
            </span>
            <br />
            <span>
              myApi.edpoint.nameFunction<span className="accent">.select</span>
              (&#123;limit: a, offset:b&#125;)(state)
              <span className="accent">?.date</span>) )
            </span>
            <br />
            —Ç—É—Ç data = –¥–∞–Ω–Ω—ñ —â–æ –∑–∞–∫–µ—à–æ–≤–∞–Ω–Ω—ñ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ limit: a,
            offset:b
          </p>
        </div>
      </div>
      <div className="questionsCard">
        <div className="questFront">
          —Ç–µ–≥–∏ –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è (—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è, –ø—ñ–¥–ª—é—á–µ–Ω–Ω—è –¥–æ –Ω–∏—Ö, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
          —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó)
        </div>
        <div className="questBack">
          <p>
            <span className="accent">tagTypes:</span> ["Xxx"] = —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ–≥–∞
            –¥–ª—è –∫–µ—à–∞
          </p>
          <br />
          <p>
            <span className="accent">providesTags:</span> ["Xxx"] = –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            –¥–æ –∫–µ—à–∞ –ø—ñ–¥ –Ω–∞–∑–≤–æ—é
          </p>
          <br />
          <p>
            <span className="accent">invalidateTags: </span>["Xxxx"] - –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            –ø—ñ—Å–ª—è –º—É—Ç–∞—Ü—ñ–π
          </p>
        </div>
      </div>
      <div className="questionsCard">
        <div className="questFront">
          Detail.jsx <br />
          –Ø–∫—â–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω–æ –¥–µ–∫—ñ–ª—å–∫–∞ –ø–æ—Å—Ç—ñ–≤
          <br /> <br />
          getPostById: build.query: (&#123; <br />
          query: (id) =&gt; 'post/$&#123;id&#125;',
          <br />
          providesTags: ....–Ø–∫ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤ –∫–µ—à?
        </div>
        <div className="questBack">
          <span>
            –û–ø–∏—Å–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î id, —â–æ–± –∫–æ–∂–µ–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂ item
            <span className="accent"> –∑–±–µ—Ä—ñ–≥–∞–≤—Å—è –≤ –æ–∫—Ä–µ–º–æ–º—É –±–ª–æ—Ü—ñ</span>
          </span>{" "}
          <br />
          <span>
            <span className="accent"> providesTags</span>: (result, error,{" "}
            <span className="accent">id</span>) =&gt; [
            <span className="accent">
              &#123;
              <br />
              type: "Tags", id&#125;
            </span>
            ]
          </span>
        </div>
      </div>
      <div className="questionsCard">
        <div className="questFront">–ó–º—ñ–Ω–∞ –ª–∞–π–∫—ñ–≤ ? </div>
        <div className="questBack">
          <span>
            <span className="accent"> build.mutation</span>(&#123;
          </span>
          <br />
          query:(id) =&gt; (&#123; <br />
          <span>
            url: 'post/$<span className="accent">&#123;id&#125;</span>;/likes'
          </span>
          <span>
            method: <span className="accent">"POST"</span>
          </span>
          &#125;), <br />{" "}
          <span>
            <span className="accent">invalidateTags: </span>(result, error, id)
            =&gt;
          </span>
          [&#123;type: "Post", id &#125;] <br />
          <br />
        </div>
      </div>
      <div className="questionsCard">
        <div className="questFront">–û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø—ñ—Å–ª—è DELETE</div>
        <div className="questBack">
          <span>
            {" "}
            <span className="accent">tagTypes:</span> ['Post', 'Posts'],
          </span>
          <br />
          <p> ...</p>
          <p>
            deletePost: build.mutation(&#123;
            <br />
            <span className="accent"> query: </span>(id) =&gt; (&#123;
            <br />
            <span>
              {" "}
              url: `/posts/$&#123;<span className="accent">id</span>&#125;`,
            </span>
            <br />
            <span>
              method: <span className="accent">'DELETE'</span>
            </span>
            , <br />
            &#125;),
            <br />
            <span>
              <span className="accent">invalidatesTags: </span>(result, error,
              id) =&gt;
            </span>{" "}
            [<br />
            <span>
              {" "}
              &#123; type:{" "}
              <span className="accent">'Posts', id: 'LIST' &#125;</span>,
            </span>
            <br />
            <span>
              {" "}
              &#123; type: <span className="accent">'Post', id &#125;</span>,
            </span>
            <br />
            ],
            <br />
            &#125;),
          </p>
        </div>
      </div>
      <div className="questionsCard">
        <div className="questFront">
          –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç—ñ–≤ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é (build.query) <br />
          –¥–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –≤ –∫–µ—à –ø—Ä–æ –∫–æ–∂–µ–Ω –ø–æ—Å—Ç
        </div>
        <div className="questBack">
          <p style={{ color: "green" }}> tagTypes: ['Post', 'Posts'],</p>
          –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç—ñ–≤ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é (build.query)
          <p>
            getPostsP: build.query(&#123;
            <br />
            <span>
              <span className="accent"> query:</span> (&#123; page = 1, limit =
              10 &#125;) =&gt;
            </span>
            <br />
            `/posts?_page=$&#123;page&#125;&_limit=$&#123;limit&#125;`,
            <br />
            <span>
              {" "}
              <span className="accent">
                providesTags: (<span style={{ color: "green" }}>result</span>)
              </span>{" "}
              =&gt;
            </span>
            <br />
            result
            <br />
            <span>
              ? [ <span className="accent">...result</span>.items.
              <span className="accent">map</span>((
              <span className="accent">&#123; id &#125;</span>) =&gt; <br />(
              <span className="accent">&#123; type: 'Post', id &#125;</span>)),
            </span>
            <br />
            <span style={{ color: "green" }}>
              {" "}
              &#123; type: 'Posts', id: 'LIST' &#125; ]
            </span>
            ,
            <br />
            <br />
            : [&#123; type: 'Posts', id: 'LIST' &#125;],
            <br />
            &#125;),
          </p>
        </div>
      </div>
      <div className="questionsCard">
        <div className="questFront">
          –•—É–∫ –Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è —Å–∫—Ä–æ–ª–∞ –≤ –∫—ñ–Ω—Ü—ñ <br />
          const isBottom = useScrollToBottom() <br />
          (const isBottom = true/false)
        </div>
        <div className="questBack">
          <p style={{ fontSize: "10px" }}>
            export function useScrollToBottom(offset = 100) &#123;
            <br />
            const [isBottom, setIsBottom] = useState(false)
            <br />
            useEffect(() =&gt; &#123;
            <br />
            <span className="accent"> let ticking = false</span>
            <br />
            const handleScroll = () =&gt; &#123;
            <br />
            const scrolledFromTop = window.scrollY + window.innerHeight
            <br />
            const pageHeight = document.documentElement.scrollHeight
            <br />
            const <span className="accent">isCurrentlyAtBottom </span>=
            pageHeight - scrolledFromTop{" "}
            <span className="accent">&lt; offset</span>
            <br />
            if (!ticking) &#123;
            <br />
            <span className="accent">if (isCurrentlyAtBottom)</span> &#123;
            <br />
            setIsBottom(isCurrentlyAtBottom)
            <br />
            <span className="accent"> ticking = true</span>
            <br />
            <span className="accent"> setTimeout</span>(() =&gt;
            setIsBottom(false), 1)
            <br />
            &#125;
            <br />
            &#125;
            <br />
            if (!isCurrentlyAtBottom) ticking = false
            <br />
            &#125;
            <br />
            window.addEventListener('scroll', handleScroll)
            <br />
            return () =&gt; window.removeEventListener('scroll', handleScroll)
            <br />
            &#125;, [offset])
            <br />
            return isBottom
            <br />
            &#125;
          </p>
        </div>
      </div>
      <div className="questionsCard">
        <div className="questFront">
          —É–º–æ–≤–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–æ—Ä—Ü—ñ—ó –¥–∞–Ω–Ω–∏—Ö
        </div>
        <div className="questBack">
          <p style={{ fontSize: "10px" }}>
            useEffect(() =&gt; &#123;
            <br />
            if (<br />
            <span className="accent"> isBottom</span> && (—Ä–µ–∑ —Ö—É–∫–∞
            useScrollToBottom() )<br />
            <span className="accent"> hasNextPage</span>(—î –¥–∞–Ω–Ω—ñ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω
            —Å—Ç–æ—Ä) &&
            <br />
            !isLoading &&
            <br />
            !isFetchingNextPage &&
            <br />
            isSuccess
            <br />
            ) &#123;
            <br />
            <span style={{ color: "green" }}> fetchNextPage()</span>
            <br />
            &#125;
            <br />
            &#125;, [<br />
            isBottom,
            <br />
            hasNextPage,
            <br />
            isLoading,
            <br />
            isFetchingNextPage,
            <br />
            isSuccess,
            <br />
            fetchNextPage,
            <br />
            ])
          </p>
        </div>
      </div>
      <div className="questionsCard">
        <div className="questFront">
          –ó–≤—ñ–¥–∫–∏ –∑'—è–≤–∏–≤—Å—è fetchNextPage() <br />{" "}
        </div>
        <div className="questBack">
          <p> fetchNextPage() –°—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ</p>
          <br />
          <p>
            const &#123; data,
            <span className="accent"> fetchNextPage,</span>
            hasNextPage, isLoading, isFetchingNextPage, isSuccess, &#125;
            <span className="accent">= useGetPostsInfiniteQuery()</span>
          </p>
        </div>
      </div>
      <div className="questionsCard">
        <div className="questFront">
          –ù–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (build.infiniteQuery)
        </div>
        <div className="questBack">
          <p style={{ fontSize: "10px" }}>
            {" "}
            <span style={{ color: "green" }}>
              {" "}
              getPosts: build.infiniteQuery
            </span>
            (&#123;
            <br />
            <span className="accent"> query:</span> (&#123; pageParam = 1
            &#125;) =&gt; `/posts?_page=$&#123;pageParam&#125;&_limit=10`,
            <br />
            <span style={{ color: "green" }}> infiniteQueryOptions:</span>{" "}
            &#123;
            <br />
            <br />
            <span className="accent"> initialPageParam: </span>1,
            <br />
            <span className="accent"> getNextPageParam:</span> (lastPage,
            allPages) =&gt;
            <br />
            lastPage.remaining &gt; 0 ? allPages.length + 1 : undefined,
            <br />
            &#125;,
            <br />
            <span className="accent"> providesTags:</span> (result) =&gt;
            <br />
            result
            <br />
            ? [<br />
            <span className="accent">...result.pages.flatMap</span>((page) =&gt;
            <br />
            page.items.map((&#123; id &#125;) =&gt; (&#123; type: 'Post', id
            &#125;)) ),
            <br />
            &#123; type: 'Posts', id: 'LIST' &#125;,
            <br />
            ]<br />
            : [&#123; type: 'Posts', id: 'LIST' &#125;],
            <br />
            &#125;),
          </p>
        </div>
      </div>

      <a
        href="https://www.youtube.com/live/y2m9D5hXzGY"
        target="_blank"
        className="mainBtn"
      >
        lesson
      </a>
      <a
        href="https://redux-toolkit.js.org/rtk-query/overview"
        target="_blank"
        className="mainBtn"
      >
        doc RTK Query
      </a>
    </div>
  );
}

export default Tasks;
